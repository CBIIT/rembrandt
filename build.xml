<project name="rembrandt" default="build_war_anthill" basedir=".">
	<property name="build.dir" location="." />
	<property name="antcontrib.lib.dir" location="${build.dir}/jar_source_files" />
	
	<path id="antcontrib.lib.classpath">
			<fileset dir="${antcontrib.lib.dir}">
				<include name="**/ant*.jar" />
			</fileset>
	</path>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath refid="antcontrib.lib.classpath" />
   	</taskdef>
	
	<if>
		<isset property="tier" />
		<then>
			<!-- if tier is defined, load tier specific properties for tier based installation -->
			<property file="${tier}.properties" />
			<echo message="loaded ${tier} tier properties." />
		</then>
		<else>
			<!-- load properties for non-tiered installation -->
			<property file="build.properties" />
		</else>
	</if>
	
	<property name="source.lib.client.dir" location="${source.lib.dir}/client" />

	<target name="systemProperties">
	            <echo message="${ant.home}"/>
	            <echo message="Java Runtime Environment 
	                          version: ${ant.java.version}" />
	            <echo message="Java Runtime Environment 
	              version: ${java.version}" />
	            <echo message="Java Runtime Environment 
	              vendor: ${java.vendor}" />
	            <echo message="Java Runtime Environment 
	              vendor URL: ${java.vendor.url}" />
	            <echo message="Java installation 
	              directory: ${java.home}" />
	            <echo message="Java Virtual Machine 
	              specification version: 
	              ${java.vm.specification.version}" />
	            <echo message="Java Virtual Machine 
	              specification vendor: 
	              ${java.vm.specification.vendor}" />
	            <echo message="Java Virtual Machine 
	              specification name: 
	              ${java.vm.specification.name}" />
	            <echo message="Java Virtual Machine 
	              implementation version: 
	              ${java.vm.version}" />
	            <echo message="Java Virtual Machine 
	              implementation vendor: 
	              ${java.vm.vendor}" />
	            <echo message="Java Virtual Machine 
	              implementation name: ${java.vm.name}" />
	            <echo message="Java Runtime Environment 
	              specification version: 
	              ${java.specification.version}" />
	            <echo message="Java Runtime Environment 
	              specification vendor: 
	              ${java.specification.vendor}" />
	            <echo message="Java Runtime Environment 
	              specification name: 
	              ${java.specification.name}" />
	            <echo message="Java class format version 
	              number: ${java.class.version}" />
	            <echo message="Java class path: 
	              ${java.class.path}" />
	            <echo message="List of paths to search when 
	              loading libraries: ${java.library.path}" />
	            <echo message="Path of extension directory 
	              or directories: ${java.ext.dirs}" />
	            <echo message="Default temp file path: 
	              ${java.io.tmpdir}" />
	            <echo message="Operating system name: 
	              ${os.name}" />
	            <echo message="Operating system 
	              architecture: ${os.arch}" />
	            <echo message="Operating system version: 
	              ${os.version}" />
	      </target>
	

	<!--
	TARGET: COMPILE
		Compiles the source directory with anthill dependencies
	-->
<!--	<target name="compile_anthill" depends="warning,build:sub-projects">  -->
	<target name="compile_anthill" depends="warning,copy_dependancy_jars">		
			<delete dir="${build.classes.dir}"/>
			<mkdir dir="${build.classes.dir}"/>
			<javac srcdir="${source.dir}" destdir="${build.classes.dir}" source="1.5" excludes="**/test/**" debug="true" debuglevel="lines,vars,source">
				<classpath>
					<fileset dir="${source.lib.dir}">
						<include name="*.jar"/>
					</fileset>
					<fileset dir="${source.nondeploy.lib.dir}">
						<include name="*.jar"/>
					</fileset>
					<fileset dir="${anthill.dependency.artifacts.dir}">
						<include name="*.jar"/>
					</fileset>
				</classpath>
			</javac>
			<javac srcdir="${applet.dir}" destdir="${applet.dir}" source="1.4" debug="true" debuglevel="lines,vars,source">
				<classpath>
						<fileset dir="${applet.dir}">
							<include name="*.jar"/>
						</fileset>
				</classpath>
			</javac>
	</target>
	<!--
		TARGET: COMPILE
			Compiles the source directory without anthill dependencies
		-->
	<target name="compile" depends="warning">
		<delete dir="${build.classes.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<javac srcdir="${source.dir}" destdir="${build.classes.dir}" source="1.5" excludes="**/test/**" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${source.lib.dir}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${source.nondeploy.lib.dir}">
					<include name="*.jar"/>
				</fileset>
                <fileset dir="${anthill.dependency.artifacts.dir}">
					<include name="*.jar"/>
				</fileset>
            </classpath>
		</javac>
		<javac srcdir="${applet.dir}" destdir="${applet.dir}" source="1.4" debug="true" debuglevel="lines,vars,source">
			<classpath>
					<fileset dir="${applet.dir}">
						<include name="*.jar"/>
					</fileset>
			</classpath>
		</javac>
	</target>
	<!--
			TARGET: copy_dependancy_jars
			copy the dependancy jars to the artifacts directory
	-->
	<target name="copy_dependancy_jars">
		<copy file="jar_source_files/caintegrator-analysis-commons.jar" todir="${anthill.artifacts.dir}" overwrite="true" />
		<copy file="jar_source_files/caintegrator-application-commons.jar" todir="${anthill.artifacts.dir}" overwrite="true" />
		<copy file="jar_source_files/caintegrator-spec.jar" todir="${anthill.artifacts.dir}" overwrite="true" />
	</target>
	<!--
		TARGET: config_cache
		Configures the echache.xml file using the settings in the
		build.properties file
	-->
	<target name="config_cache">
		<delete file="src/ehcache.xml"/>
		<delete file="conf/rembrandt_ehcache.xml"/>
		<copy file="src/ehcache.xml.templates" tofile="conf/rembrandt_ehcache.xml"/>
		<replaceregexp file="conf/rembrandt_ehcache.xml" match="@echache_path@" replace="${ncicb.configure.directory}${cache.path}" flags="g"/>
		<copy file="src/ehcache.xml.templates" tofile="src/ehcache.xml"/>
		<replaceregexp file="src/ehcache.xml" match="@echache_path@" replace="/local/content/${app.war.name}/ehcache" flags="g"/>
	</target>
	<!--
			TARGET: config_common_security_module
			Configures the common security module creating the necesary files
			for Authentication and Authorization
	-->
	<target name="config_common_security_module">
		<echo message="Configuring Common Security Module"/>
		<!-- Configuring ApplicationSecurityConfig.xml -->
		<echo message="Setting ApplicationSecurityConfig.xml"/>
		<delete file="csm_deploy/ApplicationSecurityConfig.xml"/>
		<copy file="conf/csm/ApplicationSecurityConfig.xml.template" tofile="csm_deploy/ApplicationSecurityConfig.xml"/>
		<replaceregexp file="csm_deploy/ApplicationSecurityConfig.xml" match="@CONTEXT_NAME@" replace="${app.war.name}" flags="g"/>
		<replaceregexp file="csm_deploy/ApplicationSecurityConfig.xml" match="@HIBERNATE_CONFIG_FILE@" replace="${csm.hibernate.config.file}" flags="g"/>
		<!-- Configuring rembrandt.hibernate.cfg.xml -->
		<echo message="Setting rembrandt.hibernate.cfg.xml"/>
		<delete file="conf/csm/rembrandt.hibernate.cfg.xml"/>
		<copy file="conf/csm/rembrandt.hibernate.cfg.xml.template" tofile="csm_deploy/rembrandt.hibernate.cfg.xml"/>
		<replaceregexp file="csm_deploy/rembrandt.hibernate.cfg.xml" match="@DATASOURCE_JNDI@" replace="${csm.jndi.connection.datasource}" flags="g"/>
		<!-- Configuring oracle-ds.xml -->
		<echo message="Configuring oracle-ds.xml"/>
		<delete file="csm_deploy/oracle-ds.xml"/>
		<copy file="conf/csm/oracle-ds.xml.template" tofile="csm_deploy/oracle-ds.xml"/>
		<replaceregexp file="csm_deploy/oracle-ds.xml" match="DATASOURCE_JNDI" replace="${csm.jndi.connection.datasource}" flags="g"/>
		<replaceregexp file="csm_deploy/oracle-ds.xml" match="DB_CONNECTION_URL" replace="jdbc:oracle:${urlDbalias}" flags="g"/>
		<replaceregexp file="csm_deploy/oracle-ds.xml" match="DB_USERNAME" replace="${databaseUser}" flags="g"/>
		<replaceregexp file="csm_deploy/oracle-ds.xml" match="DB_PASSWORD" replace="${databasePassword}" flags="g"/>
		<replaceregexp file="csm_deploy/oracle-ds.xml" match="ORACLE_DRIVER_CLASS" replace="${jdbcRuntimeDriver}" flags="g"/>
		<replaceregexp file="csm_deploy/oracle-ds.xml" match="EXCEPTION_SORTER_CLASS" replace="${csm.exception.sorter.class}" flags="g"/>
		<!-- Configuring properties-service.xml -->
		<echo message="Configuring properties-service.xml"/>
		<delete file="csm_deploy/properties-service.xml"/>
		<copy file="conf/csm/properties-service.xml.template" tofile="csm_deploy/properties-service.xml"/>
		<replaceregexp file="csm_deploy/properties-service.xml" match="@CSM_APPLICATION_CONFIG_FILE@" replace="${csm.application.config.file}" flags="g"/>
	</target>
	<!--
			TARGET: developement_config_common_security_module
			Will create and configure the CSM for the current local development
			environments. Depends on the "config_common_security_module"
			to create the necesary files
		-->
	<target name="developement_config_common_security_module" depends="config_common_security_module">
		<!-- Copy it to Jboss Deploy folder -->
		<copy file="csm_deploy/oracle-ds.xml" todir="${jboss.deploy.dir}"/>
		<!-- Copy it to Jboss Conf folder -->
		<copy file="csm_deploy/rembrandt.hibernate.cfg.xml" todir="${jboss.conf.dir}"/>
		<!-- Copy it to Jboss Conf folder -->
		<copy file="csm_deploy/ApplicationSecurityConfig.xml" todir="${jboss.conf.dir}"/>
	</target>

	<!--
        TARGET: copy_resources
        Copies all the bundle resources to the WEB-INF/classes/ folder
    -->
	<target name="copy_resources" depends="compile">
		<copy todir="${build.classes.dir}">
			<fileset dir="${source.dir}">
				<include name="*.xml"/>
				<exclude name="rembrandt-jbossmq-destinations-service.xml"/>
                <include name="*.properties"/>
				<include name="*.dtd"/>
				<include name="*.xsd"/>
			</fileset>
		</copy>
	</target>
	<!--
        TARGET: copy_resources_anthill
        Copies all the bundle resources to the WEB-INF/classes/ folder
        This task is intended to be a dependency for the build_war_anthill task
    -->
		<target name="copy_resources_anthill" depends="compile_anthill">
			<copy todir="${build.classes.dir}">
				<fileset dir="${source.dir}">
					<include name="*.xml"/>
					<exclude name="rembrandt-jbossmq-destinations-service.xml"/>
					<include name="*.properties"/>
					<include name="*.dtd"/>
					<include name="*.xsd"/>
					<exclude name="log4j.properties"/>
										
				</fileset>
			</copy>
		</target>
	
		<target name="config-jbossmq">
			<copy file="${source.dir}\rembrandt-jbossmq-destinations-service.xml" todir="${jboss.deploy.dir}"/>
		</target>
    <!--
		TARGET: build_war
		This will build the war file and should be used instead of the 
		build_war_anthill task (which is intended to be used by SCM)
	-->
	<target name="build_war" depends="copy_resources,config_cache">
		<delete file="${app.war.name}.war"/>
		<war destfile="${app.war.name}.war" webxml="${webapp.dir}/WEB-INF/web.xml">
			<fileset file="${webapp.dir}/*.*"/>
			<zipfileset dir="${webapp.dir}/docs" prefix="docs"/>
			<zipfileset dir="${webapp.dir}/css" prefix="css"/>
			<zipfileset dir="${webapp.dir}/images" prefix="images"/>
			<zipfileset dir="${webapp.dir}/js" prefix="js"/>
			<zipfileset dir="${webapp.dir}/jsp" prefix="jsp"/>
			<zipfileset dir="${webapp.dir}/log" prefix="log"/>
			<zipfileset dir="${webapp.dir}/tutorials" prefix="tutorials"/>
			<zipfileset dir="${webapp.dir}/XSL" prefix="XSL"/>
			<zipfileset dir="${webapp.dir}/html" prefix="html"/>
			<webinf dir="${webapp.dir}/WEB-INF"/>
		</war>
	</target>
    <target name="deployWar" depends="build_war">

    </target>
    
    <target name="deploy_local" depends="build_war_anthill">
    	<copy file="${anthill.artifacts.dir}/rembrandt.war" todir="${jboss.deploy.dir}" overwrite="true"/>
    </target>
    
    <!--
		TARGET: build_war_anthill
		This task is intended to be used to by anthill when built be SCM.
	-->
	<target name="build_war_anthill" depends="config_cache,copy_resources_anthill">
		<delete file="${app.war.name}.war"/>
		<war destfile="${app.war.name}.war" webxml="${webapp.dir}/WEB-INF/web.xml">
			<fileset file="${webapp.dir}/*.*"/>
			<zipfileset dir="${webapp.dir}/css" prefix="css"/>
			<zipfileset dir="${webapp.dir}/docs" prefix="docs"/>
			<zipfileset dir="${webapp.dir}/images" prefix="images"/>
			<zipfileset dir="${webapp.dir}/helpDocs" prefix="helpDocs"/>
			<zipfileset dir="${webapp.dir}/Applets" prefix="Applets"/>
			<zipfileset dir="${webapp.dir}/js" prefix="js"/>
			<zipfileset dir="${webapp.dir}/jsp" prefix="jsp"/>
			<zipfileset dir="${webapp.dir}/tutorials" prefix="tutorials"/>
			<zipfileset dir="${webapp.dir}/XSL" prefix="XSL"/>
			<zipfileset dir="${webapp.dir}/components" prefix="components"/>
			<zipfileset dir="${webapp.dir}/html" prefix="html">
				<exclude name="html/V2/**"/> 
				<exclude name="html/V3/**"/>
			</zipfileset>
			<zipfileset dir="${webapp.dir}/WEB-INF" prefix="WEB-INF">
				 <include name="*.*"/>
				 <exclude name="web.xml"/>
			</zipfileset>			
		    <lib dir="${anthill.dependency.artifacts.dir}">
		  	   <include name="caintegrator-analysis-commons.jar"/>
		       <include name="caintegrator-application-commons.jar"/>
		       <include name="caintegrator-spec.jar"/>
		    </lib>
		    <lib dir="${source.lib.dir}">
		  	   <include name="*.jar"/>
		    </lib>
			<lib dir="${source.lib.client.dir}">
		  	   <include name="*.jar"/>
		    </lib>			
		    <classes dir="${build.classes.dir}"/>
		</war>
		<antcall target="retrieve_deployment_artifacts"></antcall>
		<copy file="rembrandt.war" todir="${anthill.artifacts.dir}"/>

	</target>
	<target name="retrieve_deployment_artifacts" depends="config_common_security_module">
		<copy file="conf/rembrandt.properties" todir="${anthill.artifacts.dir}"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="DB_CONNECTION_URL" replace="${urlDbalias}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="DB_USERNAME" replace="${databaseUser}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="DB_PASSWORD" replace="${databasePassword}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="@ANALYSIS_SERVER_URL@" replace="${analytical.jboss.jndi}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="@CACORE_URL@" replace="${rembrandt.cacore.url}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="@WEBGENOME_URL@" replace="${webGenome.url}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="@WEBGENOME_JNDI_URL@" replace="${webGenomeJndi.url}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="@GP_SERVER@" replace="${caintegrator.gp.server}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="@CAARRAY_URL@" replace="${caarray.server.url}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="@VERSION@" replace="${rembrandt.application.version}" flags="g"/>
		<replaceregexp file="${anthill.artifacts.dir}/rembrandt.properties" match="@RELEASE_DATE@" replace="${rembrandt.application.releaseDate}" flags="g"/>
		<copy file="conf/releaseNotes.html" todir="${anthill.artifacts.dir}"/>
		<copy file="conf/rembrandtData.properties" todir="${anthill.artifacts.dir}"/>
<!--		<copy file="conf/rembrandt-properties-service.xml" todir="${anthill.artifacts.dir}"/>		-->
		<copy file="conf/rembrandt-jbossmq-destinations-service.xml" todir="${anthill.artifacts.dir}"/>
		<copy file="conf/caintegrator-jbossmq-destinations-service.xml" todir="${anthill.artifacts.dir}"/>
		<copy file="conf/igv-template.xml" todir="${anthill.artifacts.dir}"/>
		<copy file="conf/rembrandt-igv-template.jnlp" todir="${anthill.artifacts.dir}"/>
		<copy file="conf/rembrandt_ehcache.xml" todir="${anthill.artifacts.dir}"/>
		<copy file="conf/log4Configuration.txt" todir="${anthill.artifacts.dir}"/>		
		<copy file="conf/log4j.xml" todir="${anthill.artifacts.dir}"/>
		<copy file="conf/login-config.xml" todir="${anthill.artifacts.dir}"/>
		<replaceregexp file="${anthill.artifacts.dir}/login-config.xml" match="@LDAP_SERVER@" replace="${ldap.provider.url}" flags="g"/>
		<copy file="csm_deploy/ApplicationSecurityConfig.xml" todir="${anthill.artifacts.dir}"/>
		<copy file="csm_deploy/rembrandt.hibernate.cfg.xml" todir="${anthill.artifacts.dir}"/>
		<replaceregexp file="csm_deploy/oracle-ds.xml" match="DATASOURCE_REMBRANDT" replace="${rembrandt.connection.datasource}" flags="g"/>
		<copy file="csm_deploy/oracle-ds.xml" todir="${anthill.artifacts.dir}"/>
		<replaceregexp file="csm_deploy/properties-service.xml" match="@REMBRANDT_DATA_PROPERTIES@" replace="${ncicb.configure.directory}${rembrandt.data.properties.file}" flags="g"/>
		<replaceregexp file="csm_deploy/properties-service.xml" match="@REMBRANDT_PROPERTIES@" replace="${ncicb.configure.directory}${rembrandt.properties.file}" flags="g"/>
		<copy file="csm_deploy/properties-service.xml" todir="${anthill.artifacts.dir}"/>
		<copy file="src/castor_query.xml" todir="${anthill.artifacts.dir}"/>
		<copy file="conf/wikihelp.properties" todir="${anthill.artifacts.dir}"/>
	</target>
	<target name="noop"/>
	<!--
		TARGET: build_jar_for_WebGenome_anthill
		This task is intended to be used to by anthill when built be SCM.
	-->
	<target name="build_WGI_jar" depends="copy_resources_anthill">
		<delete file="${app.jar.name}.jar"/>
		<jar jarfile="${app.jar.name}.jar">
			<fileset dir="${build.classes.dir}">
				<exclude name="*template*"/>
				<exclude name="jms.properties"/>
				<exclude name="jndi.properties"/>
				<exclude name="ehcache.xml"/>
			</fileset>
		  <!-- 1. include ojb jars -->
          <fileset dir="${source.lib.dir}">
              <include name="commons-collections-3.1.jar"/>
              <include name="commons-dbcp.jar"/>
              <include name="commons-lang-2.0.jar"/>
              <include name="commons-pool.jar"/>
              <include name="db-ojb-1.0.rc7.jar"/>
              <include name="jcs.jar"/>
              <include name="jdo.jar"/>
              <include name="jdori.jar"/>
              <include name="oracle.jar"/>
          </fileset>          
		</jar>
	</target>
	
	<target name="build_dependency" if="anthill.artifacts.dir" depends="build_WGI_jar">
		<echo>
			Artifacts copied to ${anthill.artifacts.dir}
		</echo>
		<copy file="${app.jar.name}.jar" todir="${anthill.artifacts.dir}"/>
	</target>
	

	<target name="jar_check">
		<property name="weka.jar" value="${source.lib.dir}/weka.jar" />
		<available file="${weka.jar}" property="required_jars.present"/>
		<condition property="required_jars.not.present">
			<not>
				<istrue value="${required_jars.present}"/>
			</not>
		</condition>
	</target>
	<target name="warning" if="required_jars.not.present" depends="jar_check">
		<fail message="Build Failed! The required ${weka.jar} is not present to compile!  Please see ${source.lib.dir}/readme.txt" />
	</target>
	<target name="development_config_rembrandt_properties">
		<antcall target="appendPropertyService"></antcall>
		<copy file="conf/rembrandt.properties" todir="${ncicb.configure.directory}rembrandt/config"/>
	</target>
	<target name="update_rembrandt_properties">
		<copy file="conf/rembrandt.properties" todir="${ncicb.configure.directory}rembrandt/config"/>
	</target>
	<!--appends section to properties-service.xml -->
		<target name="appendPropertyService">
				<echo message="Configuring properties-service.xml"/>
				<delete file="conf/properties-service.xml"/>
				<copy file="conf/rembrandt-properties-service.xml" tofile="conf/properties-service.xml"/>
				<replaceregexp file="conf/properties-service.xml" match="@REMBRANDT_APPLICATION_CONFIG_PATH@" replace="${ncicb.configure.directory}rembrandt/config" flags="g"/>
				<echo message="Copying needed sections to properties-service in JBOSS"/>					
				<taskdef name="xmltask" classpath="not_deployed_jars/xmltask-v1.13.jar" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>		
					<!--copy and insert new property to jboss file-->
					<xmltask source="conf/properties-service.xml" clearBuffers="psBuffer">
					  			<copy path="//attribute" buffer="psBuffer" append="false"/>  			
					</xmltask>
					<xmltask source="${jboss.deploy.dir}/properties-service.xml" dest="${jboss.deploy.dir}/properties-service.xml">
							 	<insert path="//mbean[2]" buffer="psBuffer"/>
					</xmltask>
		</target>
	


	   <property name="applet.build.dir" value="${applet.dir}" /> 

	   <property name="applet.signing.dir" value="${applet.dir}" /> 	      

	    <!-- Applet Compile/Signing -->
	   <property name="keystore.alias" value="tomcat" /> 
	   <property name="keystore.keypass" value="changeit" /> 
	   <property name="keystore.storepass" value="changeit" /> 
       <property name="keystore.location" value="C:/temp/server.keystore"  /> 
	    <target name="compile-applet" depends="">
	 	   <!-- Applet Compile/Signing property-->
	 		<javac srcdir="${applet.dir}" destdir="${applet.dir}" source="1.4" debug="true" debuglevel="lines,vars,source">
	 			<classpath>
	 				<fileset dir="${applet.dir}">
	 					<include name="*.jar"/>
	 				</fileset>
	 			</classpath>
	 		</javac>
	    </target>

		<!--  create the SignedPCAApplet.jar  --> 
		<target name="jar-pca-applet" depends="compile-applet">
		 	<unjar src="${applet.build.dir}/commons-lang-2.0.jar" dest="${applet.build.dir}" />
		 	<unjar src="${applet.build.dir}/jmathplot-14.jar" dest="${applet.build.dir}" />
	        <jar jarfile="${applet.build.dir}/PCAApplet.jar" excludes="**/MANIFEST.MF, *.jar, *.xml" basedir="${applet.build.dir}"/>
		</target>

	    <target name="sign-pca-applet" depends="jar-pca-applet">
	        <signjar jar="${applet.build.dir}/PCAApplet.jar" 
	                  alias="${keystore.alias}" 
	                  keypass="${keystore.keypass}" 
	                  storepass="${keystore.storepass}" 
	                  keystore="${keystore.location}" 
	                  signedjar="${applet.build.dir}/SignedPCAApplet.jar" /> 
	    </target>
	    
	<target name="build:caintegrator-analysis-commons" description="Call caintegrator-analysis-commons sub-project build target to produce artifiacts">
		<!-- setting the property in the ant call overrides the property in the sub-project allowing the artifact to be produced where needed -->
		<ant inheritAll="false" inheritRefs="false" antfile="build.xml" target="build_dependency" dir="${caintegrator-analysis-commons.path}">
		</ant>
	</target>
	
	<target name="build:caIntegrator-spec" depends="build:caintegrator-analysis-commons" description="Call caIntegrator-spec sub-project build target to produce artifiacts">
		<!-- setting the property in the ant call overrides the property in the sub-project allowing the artifact to be produced where needed -->
		<ant inheritAll="false" inheritRefs="false" antfile="build.xml" target="build_dependency" dir="${caIntegrator-spec.path}">
		</ant>
	</target>

	<target name="build:caintegrator-application-commons" depends="build:caIntegrator-spec" description="Call caintegrator-application-commons sub-project build target to produce artifiacts">
		<!-- setting the property in the ant call overrides the property in the sub-project allowing the artifact to be produced where needed -->
		<ant inheritAll="false" inheritRefs="false" antfile="build.xml" target="build_dependency" dir="${caintegrator-application-commons.path}">
		</ant>
	</target>
	
	<target name="build:sub-projects" depends="build:caintegrator-application-commons" description="Call sub-projects build target to produce sub-project artifiacts">
	</target>


</project>
